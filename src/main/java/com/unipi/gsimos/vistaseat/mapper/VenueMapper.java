package com.unipi.gsimos.vistaseat.mapper;

import com.unipi.gsimos.vistaseat.dto.VenueDto;
import com.unipi.gsimos.vistaseat.model.User;
import com.unipi.gsimos.vistaseat.model.Venue;
import org.mapstruct.Context;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

/**
 * Mapper interface for converting between {@link Venue} entities and {@link VenueDto} objects.
 * <p>
 * This interface is implemented automatically by MapStruct at compile time.
 * It handles:
 * <ul>
 *   <li>Mapping from {@link VenueDto} to {@link Venue} using an injected {@link User} as the managing admin.</li>
 *   <li>Mapping from {@link Venue} to {@link VenueDto}, including flattening the admin's ID.</li>
 * </ul>
 *
 * <p>MapStruct uses {@code @Component} when {@code componentModel = "spring"} to allow Spring injection.</p>
 */
@Mapper(componentModel = "spring")
public interface VenueMapper {

    /**
     * Converts a {@link VenueDto} into a {@link Venue} entity.
     *
     * @param venueDto  the source DTO containing venue creation data
     * @param adminUser the admin user managing the venue (injected as context)
     * @return a new {@link Venue} entity populated with the DTO values and admin reference
     */
    @Mapping(target = "managedBy", expression = "java(adminUser)")
    @Mapping(target = "id", ignore = true) // autogenerated during creation
    @Mapping(target = "events", ignore = true)
    Venue toEntity(VenueDto venueDto, @Context User adminUser);

    /**
     * Converts a {@link Venue} entity into a {@link VenueDto}.
     *
     * @param venue the source entity
     * @return a DTO representing the venue, including the admin's ID
     */
    @Mapping(target = "adminId", source = "managedBy.id")
    VenueDto toDto(Venue venue);
}
